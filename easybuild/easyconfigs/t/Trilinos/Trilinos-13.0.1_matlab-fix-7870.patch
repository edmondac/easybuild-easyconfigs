From 6ff0c06b7414e23b8fb7eb0fb305d36951aa1835 Mon Sep 17 00:00:00 2001
From: Brian Kelley <bmkelle@sandia.gov>
Date: Wed, 19 Aug 2020 11:37:26 -0600
Subject: [PATCH 1/3] MueLu: Update/fix MueMex build (matlab interface)

-When adding the matlab subdirectory, check Tpetra_INST_INT_INT first to
  make error messages clearer. If that is off, then Xpetra's Epetra support
  is automatically disabled but MueLu doesn't tell you that
-Add -fPIC flag to compilation of muemex.mexa64
-Guard uses of complex-valued Tpetra/Xpetra objects by
 HAVE_TPETRA_INST_COMPLEX_DOUBLE (build succeeds with complex disabled now)
-Update the calls to CreateEpetra/TpetraPreconditioner, which no longer have
 overloads taking coordinates. Instead, setting coordinates in the parameter list.
---
 packages/muelu/CMakeLists.txt            | 10 ++---
 packages/muelu/matlab/bin/CMakeLists.txt |  4 +-
 packages/muelu/matlab/bin/muemex.cpp     | 48 ++++++++++++++++--------
 packages/muelu/matlab/bin/muemex.h       |  2 +
 4 files changed, 41 insertions(+), 23 deletions(-)

diff --git a/packages/muelu/CMakeLists.txt b/packages/muelu/CMakeLists.txt
index 4b733adc89a..4a0e009cb79 100644
--- a/packages/muelu/CMakeLists.txt
+++ b/packages/muelu/CMakeLists.txt
@@ -426,17 +426,17 @@ ENDIF ()
 ADD_SUBDIRECTORY(src)
 
 if(TPL_ENABLE_MATLAB)
+  IF(NOT Tpetra_INST_INT_INT OR Tpetra_INST_INT_LONG OR Tpetra_INST_INT_LONG_LONG)
+    MESSAGE(FATAL_ERROR "Muemex interfaces require that Tpetra only be instantiated with Tpetra_INST_INT_INT, not Tpetra_INST_INT_LONG or Tpetra_INST_INT_LONG_LONG")
+  ENDIF()
+
   if (NOT ${PROJECT_NAME}_ENABLE_EXPLICIT_INSTANTIATION)
     MESSAGE(FATAL_ERROR "Muemex interfaces require \"-D${PROJECT_NAME}_ENABLE_EXPLICIT_INSTANTIATION:BOOL=ON\".")
   ENDIF()
+
   IF(NOT ${PACKAGE_NAME}_ENABLE_Epetra OR NOT ${PACKAGE_NAME}_ENABLE_Tpetra)
       MESSAGE(FATAL_ERROR "Muemex interfaces require \"-D${PACKAGE_NAME}_ENABLE_Epetra:BOOL=ON\" and \"-D${PACKAGE_NAME}_ENABLE_Tpetra:BOOL=ON\".")
   ENDIF()
-
-  IF(NOT Tpetra_INST_INT_INT OR  Tpetra_INST_INT_LONG OR Tpetra_INST_INT_LONG_LONG)
-    MESSAGE(FATAL_ERROR "Muemex interfaces require that Tpetra only be instantiated with Tpetra_INST_INT_INT, not Tpetra_INST_INT_LONG or Tpetra_INST_INT_LONG_LONG")
-  ENDIF()
-
 ENDIF()
 
 if(TPL_ENABLE_MATLAB)
diff --git a/packages/muelu/matlab/bin/CMakeLists.txt b/packages/muelu/matlab/bin/CMakeLists.txt
index b4483b9dd7d..fac76a15186 100644
--- a/packages/muelu/matlab/bin/CMakeLists.txt
+++ b/packages/muelu/matlab/bin/CMakeLists.txt
@@ -15,8 +15,8 @@ if(TPL_ENABLE_MATLAB)
   SET_AND_INC_DIRS(DIR ${CMAKE_CURRENT_BINARY_DIR})
 
   # Force the code into R2017b compatibility mode
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMX_COMPAT_64 -DMATLAB_MEXCMD_RELEASE=R2017b") 
-  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DMX_COMPAT_64 -DMATLAB_MEXCMD_RELEASE=R2017b") 
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMX_COMPAT_64 -fPIC -DMATLAB_MEXCMD_RELEASE=R2017b") 
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DMX_COMPAT_64 -fPIC -DMATLAB_MEXCMD_RELEASE=R2017b") 
 
 
   # Debugging information
diff --git a/packages/muelu/matlab/bin/muemex.cpp b/packages/muelu/matlab/bin/muemex.cpp
index 2cc067d2da1..6b383350200 100644
--- a/packages/muelu/matlab/bin/muemex.cpp
+++ b/packages/muelu/matlab/bin/muemex.cpp
@@ -330,10 +330,12 @@ RCP<Hierarchy_double> getDatapackHierarchy<double>(MuemexSystem* dp)
   return hier;
 }
 
+#ifdef HAVE_COMPLEX_SCALARS
 template<> RCP<Hierarchy_complex> getDatapackHierarchy<complex_t>(MuemexSystem* dp)
 {
   return ((TpetraSystem<complex_t>*) dp)->getHierarchy();
 }
+#endif
 
 template<typename Scalar, typename T>
 void setHierarchyData(MuemexSystem* problem, int levelID, T& data, string& dataName)
@@ -351,8 +353,12 @@ void setHierarchyData(MuemexSystem* problem, int levelID, T& data, string& dataN
   }
   else if(problem->type == TPETRA_COMPLEX)
   {
+#ifdef HAVE_COMPLEX_SCALARS
     RCP<Hierarchy<complex_t, mm_LocalOrd, mm_GlobalOrd, mm_node_t>> hier = ((TpetraSystem<complex_t>*) problem)->getHierarchy();
     level = hier->GetLevel(levelID);
+#else
+    throw std::runtime_error("setHierarchyData(): complex scalars not supported.");
+#endif
   }
   if(level.is_null())
     throw runtime_error("Error getting level when setting custom level data.");
@@ -381,9 +387,13 @@ mxArray* MuemexSystem::getHierarchyData(string dataName, MuemexType dataType, in
     }
     else if(this->type == TPETRA_COMPLEX)
     {
+#ifdef HAVE_COMPLEX_SCALARS
       TpetraSystem<complex_t>* tsys = (TpetraSystem<complex_t>*) this;
       if(tsys->keepAll)
         fmb = tsys->systemManagers[levelID];
+#else
+      throw std::runtime_error("getHierarchyData(): complex scalars not supported.");
+#endif
     }
     const FactoryBase* factory = NoFactory::get(); //(ptr to constant)
     bool needFMB = true;
@@ -414,6 +424,7 @@ mxArray* MuemexSystem::getHierarchyData(string dataName, MuemexType dataType, in
       }
       case TPETRA_COMPLEX:
       {
+#ifdef HAVE_COMPLEX_SCALARS
         RCP<OpenHierarchy<complex_t, mm_LocalOrd, mm_GlobalOrd, mm_node_t>> hier = rcp_static_cast<OpenHierarchy<complex_t, mm_LocalOrd, mm_GlobalOrd, mm_node_t>>(getDatapackHierarchy<complex_t>(this));
         level = hier->GetLevel(levelID);
         if(needFMB)
@@ -430,6 +441,9 @@ mxArray* MuemexSystem::getHierarchyData(string dataName, MuemexType dataType, in
           }
         }
         break;
+#else
+        throw std::runtime_error("Complex scalars not supported");
+#endif
       }
     }
     if(level.is_null())
@@ -446,7 +460,11 @@ mxArray* MuemexSystem::getHierarchyData(string dataName, MuemexType dataType, in
       case XPETRA_MATRIX_DOUBLE:
         return saveDataToMatlab(level->Get<RCP<Xpetra_Matrix_double>>(dataName, factory));
       case XPETRA_MATRIX_COMPLEX:
+      {
+#ifdef HAVE_COMPLEX_SCALARS
         return saveDataToMatlab(level->Get<RCP<Xpetra_Matrix_complex>>(dataName, factory));
+#endif
+      }
       case XPETRA_MULTIVECTOR_DOUBLE:
         if(dataName == "Coordinates")
         {
@@ -553,14 +571,8 @@ int EpetraSystem::setup(const mxArray* matlabA, bool haveCoords, const mxArray*
       /* Matrix Fill */
       A = loadDataFromMatlab<RCP<Epetra_CrsMatrix>>(matlabA);
       if(haveCoords)
-      {
-        RCP<Epetra_MultiVector> coords = loadDataFromMatlab<RCP<Epetra_MultiVector>>(matlabCoords);
-        prec = MueLu::CreateEpetraPreconditioner(A, *List, coords);
-      }
-      else
-      {
-        prec = MueLu::CreateEpetraPreconditioner(A, *List);
-      }
+        List->set("Coordinates", loadDataFromMatlab<RCP<Epetra_MultiVector>>(matlabCoords));
+      prec = MueLu::CreateEpetraPreconditioner(A, *List);
       //underlying the Epetra_Operator prec is a MueLu::EpetraOperator
       RCP<MueLu::EpetraOperator> meo = rcp_static_cast<MueLu::EpetraOperator, Epetra_Operator>(prec);
       operatorComplexity = meo->GetHierarchy()->GetOperatorComplexity();
@@ -691,14 +703,8 @@ void TpetraSystem<Scalar>::normalSetup(const mxArray* matlabA, bool haveCoords,
   RCP<Tpetra::Operator<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t> > opA(A);
   RCP<MueLu::TpetraOperator<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t>> mop;
   if(haveCoords)
-  {
-    RCP<Tpetra_MultiVector_double> coordArray = loadDataFromMatlab<RCP<Tpetra_MultiVector_double>>(matlabCoords);
-    mop = MueLu::CreateTpetraPreconditioner<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t>(opA, *List, coordArray);
-  }
-  else
-  {
-    mop = MueLu::CreateTpetraPreconditioner<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t>(opA, *List);
-  }
+    List->set("Coordinates", loadDataFromMatlab<RCP<Tpetra_MultiVector_double>>(matlabCoords));
+  mop = MueLu::CreateTpetraPreconditioner<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t>(opA, *List);
   prec = rcp_implicit_cast<Tpetra::Operator<Scalar, mm_LocalOrd, mm_GlobalOrd, mm_node_t>>(mop);
 
   // print data??
@@ -1103,6 +1109,7 @@ void parse_list_item(RCP<ParameterList> List, char *option_name, const mxArray *
       // Single or double, real or complex
       if(mxIsComplex(prhs))
       {
+#ifndef HAVE_COMPLEX_SCALARS
         opt_float = mxGetPr(prhs);
         double* opt_float_imag = mxGetPi(prhs);
         //assuming user wants std::complex<double> here...
@@ -1121,6 +1128,10 @@ void parse_list_item(RCP<ParameterList> List, char *option_name, const mxArray *
           else
             List->set(option_name, loadDataFromMatlab<RCP<Xpetra_MultiVector_complex>>(prhs));
         }
+#else
+        std::cerr << "Error: cannot load argument \"" << option_name << "\" because complex is not instantiated in this build.\n";
+        throw std::invalid_argument("Complex not supported");
+#endif
       }
       else
       {
@@ -1478,6 +1489,7 @@ void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
           }
           case TPETRA_COMPLEX:
           {
+#ifdef HAVE_COMPLEX_SCALARS
             RCP<TpetraSystem<complex_t>> tsys = rcp_static_cast<TpetraSystem<complex_t>, MuemexSystem>(dp);
             RCP<Tpetra_CrsMatrix_complex> matrix;
             if(reuse)
@@ -1486,6 +1498,10 @@ void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
               matrix = loadDataFromMatlab<RCP<Tpetra_CrsMatrix_complex>>(prhs[2]);
             plhs[0] = tsys->solve(List, matrix, rhs, iters);
             break;
+#else
+            std::cerr << "Cannot solve complex-valued system because complex is not enabled in this build.\n";
+            throw std::invalid_argument("Complex not supported");
+#endif
           }
         }
         if(nlhs > 1)
diff --git a/packages/muelu/matlab/bin/muemex.h b/packages/muelu/matlab/bin/muemex.h
index 8ce42322384..e994ceb565a 100644
--- a/packages/muelu/matlab/bin/muemex.h
+++ b/packages/muelu/matlab/bin/muemex.h
@@ -79,7 +79,9 @@
 
 #include "mex.h"
 
+#ifdef HAVE_TPETRA_INST_COMPLEX_DOUBLE
 #define HAVE_COMPLEX_SCALARS
+#endif
 
 namespace MueLu
 {

From 40f6c3a3791ff167d4c9358a9bd83a320a9ce6d3 Mon Sep 17 00:00:00 2001
From: Brian Kelley <bmkelle@sandia.gov>
Date: Wed, 19 Aug 2020 12:14:37 -0600
Subject: [PATCH 2/3] MueLu: Fix MueMex build with Intrepid2 enabled

(just change .dimension() to .extent(), the kokkos 3 way)
---
 packages/muelu/matlab/src/MueLu_MatlabUtils_def.hpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/packages/muelu/matlab/src/MueLu_MatlabUtils_def.hpp b/packages/muelu/matlab/src/MueLu_MatlabUtils_def.hpp
index 8cddfd6b482..7d0ec31c1b7 100644
--- a/packages/muelu/matlab/src/MueLu_MatlabUtils_def.hpp
+++ b/packages/muelu/matlab/src/MueLu_MatlabUtils_def.hpp
@@ -1309,8 +1309,8 @@ mxArray* saveDataToMatlab(RCP<FieldContainer_ordinal>& data)
   if(rank!=2)
     throw std::runtime_error("Error: Only rank two FieldContainers are supported.");
 
-  int nr = data->dimension(0);
-  int nc = data->dimension(1);
+  int nr = data->extent(0);
+  int nc = data->extent(1);
 
   mwSize dims[]={(mwSize)nr,(mwSize)nc};
   mxArray* mxa = mxCreateNumericArray(2,dims, mxINT32_CLASS, mxREAL);

From 1ace32d52e6edf63e79fe43e03fc0d800bf73878 Mon Sep 17 00:00:00 2001
From: Brian Kelley <bmkelle@sandia.gov>
Date: Thu, 20 Aug 2020 11:03:28 -0600
Subject: [PATCH 3/3] ML: add -fPIC to flags for mlmex

Same change as MueLu, makes linking succeed as long as
-DBUILD_SHARED_LIBS=ON, with no other global flags needed.
---
 packages/ml/matlab/CMakeLists.txt | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/packages/ml/matlab/CMakeLists.txt b/packages/ml/matlab/CMakeLists.txt
index 72bd31344d9..ae7bd2af0d8 100644
--- a/packages/ml/matlab/CMakeLists.txt
+++ b/packages/ml/matlab/CMakeLists.txt
@@ -23,6 +23,9 @@ if(TPL_ENABLE_MATLAB)
     MESSAGE("MATLAB_MEX_DIR   = " ${MATLAB_MEX_DIR})
   ENDIF()
 
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC") 
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC") 
+
   APPEND_SET(HEADERS mlmex.h)
   APPEND_SET(SOURCES mlmex.cpp)
   
