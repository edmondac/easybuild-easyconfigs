diff --git a/CMakeLists.txt b/CMakeLists.txt
index c95f755..30f1223 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -118,8 +118,30 @@ elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
     else()
         set (PTHREAD_LIB "pthread")
     endif()
+elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Intel")
+    execute_process(
+        COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE INTEL_VERSION)
+    if (NOT (INTEL_VERSION VERSION_GREATER 14.0 OR INTEL_VERSION VERSION_EQUAL 14.0))
+        message(FATAL_ERROR "${PROJECT_NAME} requires intel 14.0 or greater.  Found ${INTEL_VERSION}")
+    endif ()
+
+    set (INTEL TRUE)
+    set (PTHREAD_LIB "pthread")
+    set (CMAKE_CXX_FLAGS "-pthread -funroll-loops -fPIC -fomit-frame-pointer -Ofast -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -std=c++11 -Wreturn-type -Werror=return-type")
+
+    # If we're on Linux (i.e. not OSX) and we're using 
+    # gcc, then set the -static-libstdc++ flag
+    if (NOT APPLE) 
+        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++")
+    endif()
+
+    set (WARNING_IGNORE_FLAGS "${WARNING_IGNORE_FLAGS} -Wno-unused-local-typedefs")
+    set (BOOST_TOOLSET "intel")
+    set (BOOST_CONFIGURE_TOOLSET "--with-toolset=gcc")
+       set (BCXX_FLAGS "-std=c++11")
+    set (BOOST_EXTRA_FLAGS toolset=gcc cxxflags=${BCXX_FLAGS})
 else ()
-    message(FATAL_ERROR "Your C++ compiler does not support C++11.")
+    message(FATAL_ERROR "Your C++ compiler (${CMAKE_CXX_COMPILER_ID}) does not support C++11.")
 endif ()

 ## TODO: Figure out how to detect this automatically
