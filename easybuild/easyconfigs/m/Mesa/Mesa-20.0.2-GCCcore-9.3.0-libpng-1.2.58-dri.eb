# This is a Mesa using software rendering via Gallium-DRI and libglvnd
# - libglvnd can dynamically choose between system-installed NVidia
#   libGLX/libEGL or the software renderers provided by this Mesa
# - EGL is available
#
# Software renderers are enabled based on system architecture:
# - llvmpipe: the high-performance Gallium LLVM driver
# - swr: Intel's OpenSWR
# Default renderer is llvmpipe. SWR can be enabled by setting the environment
# variable GALLIUM_DRIVER=swr

easyblock = 'MesonNinja'

name = 'Mesa'
version = '20.0.2'
versionsuffix = '-libpng-1.2.58-dri'

homepage = 'https://www.mesa3d.org/'
description = """Mesa is an open-source implementation of the OpenGL specification -
 a system for rendering interactive 3D graphics."""

toolchain = {'name': 'GCCcore', 'version': '9.3.0'}
# swr detects and builds parts specific for AVX and AVX2. If we use
# -xHost, this always gets overwritten and will fail.
toolchainopts = {'optarch': False}

source_urls = [
    'https://mesa.freedesktop.org/archive/',
    'https://mesa.freedesktop.org/archive/%(version)s',
    'ftp://ftp.freedesktop.org/pub/mesa/%(version)s',
    'ftp://ftp.freedesktop.org/pub/mesa/older-versions/%(version_major)s.x/%(version)s',
    'ftp://ftp.freedesktop.org/pub/mesa/older-versions/%(version_major)s.x',
]
sources = [SOURCELOWER_TAR_XZ]
checksums = [
    'aa54f1cb669550606aab8ceb475105d15aeb814fca5a778ce70d0fd10e98e86f',  # mesa-20.0.2.tar.xz
]

builddependencies = [
    ('binutils', '2.34'),
    ('Meson', '0.53.2', '-Python-3.8.2'),
    ('Ninja', '1.10.0'),
    ('flex', '2.6.4'),
    ('Bison', '3.5.3'),
    ('pkg-config', '0.29.2'),
    ('Mako', '1.1.2'),
    ('libxml2', '2.9.10'),
    ('expat', '2.2.9'),
    ('gettext', '0.20.1'),
]

dependencies = [
    ('zlib', '1.2.11'),
    ('zstd', '1.4.4'),
    ('libdrm', '2.4.100', '-libpng-1.2.58'),
    ('libunwind', '1.3.1'),
    ('LLVM', '9.0.1'),
    ('X11', '20200222', '-libpng-1.2.58'),
]

import subprocess as local_subprocess  # NOQA
local_arch = local_subprocess.check_output(['uname', '-m']).strip()

configopts = " -Dplatforms=x11 -Dosmesa=gallium -Ddri3=auto -Ddri-drivers='auto' -Dvulkan-drivers=''"
configopts += " -Dgbm=false -Dglx-direct=false -Degl=false"
configopts += " -Dllvm=true -Dshared-llvm=true"
configopts += " -Dlibunwind=true -Dglx=dri"

if local_arch == 'ppc64le':
    configopts += " -Dgallium-drivers='swrast' "
else:
    configopts += " -Dgallium-drivers='swrast,swr' "

sanity_check_paths = {
    'files': ['lib/libGL.%s' % SHLIB_EXT, 'lib/libOSMesa.%s' % SHLIB_EXT,
              'lib/libGLESv1_CM.%s' % SHLIB_EXT, 'lib/libGLESv2.%s' % SHLIB_EXT,
              'include/GL/glext.h',
              'include/GL/glx.h', 'include/GL/osmesa.h',
              'include/GL/gl.h', 'include/GL/glxext.h',
              'include/GLES/gl.h',
              'include/GLES2/gl2.h', 'include/GLES3/gl3.h'],
    'dirs': ['include/GL/internal'],
}

moduleclass = 'vis'
